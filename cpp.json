{
	"atcoder": {
		"prefix": "atcoder",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"#define endl '\\n'",
			"#define ll long long",
			"#define rep(i, n) for (ll i = 0; i < (ll)(n); i++)",
			"",
			"int init()",
			"{",
			"    cin.tie(nullptr);",
			"    ios_base::sync_with_stdio(false);",
			"",
			"    return 0;",
			"}",
			"",
			"int main()",
			"{",
			"    init();",
			"",
			"    $1",
			"",
			"    return 0;",
			"}"
		],
	},
	"all_of": {
		"prefix": "all_of",
		"body": [
			"if (all_of(vec.begin(), vec.end(), [](int n) { return n == 1; }))",
			"{",
			"}"
		],
	},
	"any_of": {
		"prefix": "any_of",
		"body": [
			"if (any_of(vec.begin(), vec.end(), [](int n) { return n == 1; }))",
			"{",
			"}"
		],
	},
	"count_if": {
		"prefix": "count_if",
		"body": [
			"ll count = count_if(An.begin(), An.end(), [i](int x) { return i >= x; });",
		],
	},
	"find": {
		"prefix": "find",
		"body": [
			"if (find(vec.begin(), vec.end(), n) != vec.end())",
			"{",
			"}"
		],
	},
	"fixed": {
		"prefix": "fixed",
		"body": [
			"cout << fixed << setprecision(10) << answer << endl;",
		],
	},
	"next_permutation": {
		"prefix": "next_permutation",
		"body": [
			"do",
			"{",
			"} while (next_permutation(paths.begin(), paths.end()));"
		],
	},
	"unique": {
		"prefix": "unique",
		"body": [
			"sort(vec.begin(), vec.end());",
			"vec.erase(unique(vec.begin(), vec.end()), vec.end());"
		],
	},
	"priority_queue": {
		"prefix": "priority_queue",
		"body": [
			"priority_queue<int, vector<int>, greater<int>> pq;",
		],
	},
	"distance": {
		"prefix": "distance",
		"body": [
			"auto max_it = max_element(vec.begin(), vec.end());",
			"auto index = distance(vec.begin(), max_it);"
		],
	},
}
